%{
/**
 * @file
 * Egress text parser (generated by bison)
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "eg_enc.h"

#define YYERROR_VERBOSE 1
#if 0
#define YYDEBUG 1
int yydebug = 1;
#endif

int  yylex();
void yyerror(char* str);

static eg_elem_t *element_top;
eg_elem_t *get_element_top() { return element_top; }

#if 0
static char *strtoupper(char *str)
{
    char *p;
    for (p = str; *p != '\0'; p++) {
        *p = toupper(*p);
    }
    return str;
}
#endif

static eg_elem_t *make_elem(char *name)
{
    eg_elem_t *elem = malloc(sizeof(eg_elem_t));
    memset(elem, 0, sizeof(*elem));
    elem->name = name;
    return elem;
}

static eg_elem_t *append_elem(eg_elem_t *elem0, eg_elem_t *elem1)
{
    eg_elem_t *elem;

    for (elem = elem0; elem->next; elem = elem->next) {
        ;
    }
    elem->next = elem1;
    return elem0;
}

static eg_elem_val_t *make_val(int type, char *str)
{
    eg_elem_val_t *v = (eg_elem_val_t *)malloc(sizeof(eg_elem_val_t));
    memset(v, 0, sizeof(*v));
    v->type = type;
    v->str = str;
    return v;
}
%}

%union {
    char *string;
    eg_elem_t *elem;
    eg_elem_val_t *val;
}

%token KEY
%token KEYWORD
%token DECNUM
%token HEXNUM
%token MACADDR
%token IPV4ADDR
%token IPV6ADDR
%token STRING
%token EQUAL
%token LCBR
%token RCBR
%token CHAR

%type <string> KEY KEYWORD STRING DECNUM HEXNUM MACADDR IPV4ADDR IPV6ADDR key keyword
%type <elem> input element elements
%type <val> value

%%
input
    : /* empty */       { element_top = NULL; YYACCEPT; }
    | elements          { element_top = $1; YYACCEPT; }
    ;

elements
    : element           { $$ = $1; }
    | elements element  { $$ = append_elem($1, $2); }
    ;

element
    : key                       { $$ = make_elem($1); }
    | key LCBR RCBR             { $$ = make_elem($1); }
    | key EQUAL value           { $$ = make_elem($1); $$->val = $3; }
    | key LCBR elements RCBR    { $$ = make_elem($1); $$->elems = $3; }
    | error                     { YYABORT; }
    ;

key
    : KEY
    ;

keyword
    : KEY
    | KEYWORD
    ;

value
    : DECNUM    { $$ = make_val(EG_TYPE_NUMBER, $1); }
    | HEXNUM    { $$ = make_val(EG_TYPE_NUMBER, $1); }
    | MACADDR   { $$ = make_val(EG_TYPE_MACADDR, $1); }
    | IPV4ADDR  { $$ = make_val(EG_TYPE_IPV4ADDR, $1); }
    | IPV6ADDR  { $$ = make_val(EG_TYPE_IPV6ADDR, $1); }
    | STRING    { $$ = make_val(EG_TYPE_STRING, $1); }
    | keyword   { $$ = make_val(EG_TYPE_KEYWORD, $1); }
    ;
%%

void yyerror(char* errmsg)
{
   extern int yylineno;
   extern char *yytext;
   fprintf(stderr, "*** %s\n  %d: %s\n", errmsg, yylineno, yytext);
}

